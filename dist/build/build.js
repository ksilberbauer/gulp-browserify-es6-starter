(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/App.js":[function(require,module,exports){
"use strict";

var ColorPoint = require("./ColorPoint");

var cp = new ColorPoint(25, 8, "red");

window.cp = cp;

console.log(cp.toString());


},{"./ColorPoint":"/Users/ksilberbauer/projects/gulp-browserify-es6-template/src/js/ColorPoint.js"}],"/Users/ksilberbauer/projects/gulp-browserify-es6-template/src/js/ColorPoint.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) {
	if (staticProps) Object.defineProperties(child, staticProps);if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

var _get = function get(_x, _x2, _x3) {
	_function: while (true) {
		var object = _x,
		    property = _x2,
		    receiver = _x3;
		desc = parent = getter = undefined;
		var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
			var parent = Object.getPrototypeOf(object);if (parent === null) {
				return undefined;
			} else {
				_x = parent;
				_x2 = property;
				_x3 = receiver;
				continue _function;
			}
		} else if ("value" in desc && desc.writable) {
			return desc.value;
		} else {
			var getter = desc.get;if (getter === undefined) {
				return undefined;
			}return getter.call(receiver);
		}
	}
};

var _inherits = function (subClass, superClass) {
	if (typeof superClass !== "function" && superClass !== null) {
		throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) subClass.__proto__ = superClass;
};

var _classCallCheck = function (instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
};

var Point = require("./Point");

var ColorPoint = (function (Point) {
	function ColorPoint(x, y, color) {
		_classCallCheck(this, ColorPoint);

		_get(Object.getPrototypeOf(ColorPoint.prototype), "constructor", this).call(this, x, y);
		this.color = color;
	}

	_inherits(ColorPoint, Point);

	_prototypeProperties(ColorPoint, null, {
		toString: {
			value: function toString() {
				return _get(Object.getPrototypeOf(ColorPoint.prototype), "toString", this).call(this) + " in " + this.color;
			},
			writable: true,
			configurable: true
		}
	});

	return ColorPoint;
})(Point);

module.exports = ColorPoint;


},{"./Point":"/Users/ksilberbauer/projects/gulp-browserify-es6-template/src/js/Point.js"}],"/Users/ksilberbauer/projects/gulp-browserify-es6-template/src/js/Point.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) {
	if (staticProps) Object.defineProperties(child, staticProps);if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

var _classCallCheck = function (instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
};

var Point = (function () {
	function Point(x, y) {
		_classCallCheck(this, Point);

		this.x = x;
		this.y = y;
	}

	_prototypeProperties(Point, null, {
		prop: {
			get: function () {
				return this.val.length;
			},
			set: function (value) {
				this.val = value;
			},
			configurable: true
		},
		toString: {
			value: function toString() {
				return "(" + this.x + ", " + this.y + ")";
			},
			writable: true,
			configurable: true
		}
	});

	return Point;
})();

module.exports = Point;


},{}]},{},["./src/js/App.js"])
//# sourceMappingURL=data:application/json;base64,
